generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  isEmailVerified    Boolean   @default(false)
  fullName           String?
  username           String?
  password           String?
  gender             String?
  dateOfBirth        DateTime?
  role               Role      @default(USER)
  isAnonymous        Boolean   @default(false)
  avatarURL          String?   @default("https://res.cloudinary.com/nexweb/image/upload/v1753801741/thryve/avatar/user_profile_gc8znx.png")
  avatarPublicId     String?   @default("user_profile.png")
  bio                String?   @default("")
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  refreshToken       String?
  refreshTokenExpiry DateTime?

  posts         Post[]
  comments      Comment[]
  sessions1     ChatSession[]     @relation("User1Sessions")
  sessions2     ChatSession[]     @relation("User2Sessions")
  messages      ChatMessage[]
  appointments  Appointment[]
  doctorProfile DoctorProfile?
  journals      Journal[]
  notifications Notification[]
  preferences   UserPreferences?
  adminActions  AdminAction[]     @relation("AdminActions")
  otps          OTPVerification[]
}

model Post {
  id           String   @id @default(cuid())
  title        String
  content      String
  is_anonymous Boolean  @default(true)
  tags         String[]
  category     String
  image_urls   String[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user      User      @relation(fields: [user_id], references: [id])
  user_id   String
  comments  Comment[]
  Illness   Illness?  @relation(fields: [illnessId], references: [id])
  illnessId String?
}

model Comment {
  id      String @id @default(cuid())
  post    Post   @relation(fields: [post_id], references: [id])
  post_id String

  parent_comment    Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id])
  parent_comment_id String?
  replies           Comment[] @relation("CommentReplies")

  content    String
  created_at DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

model ChatSession {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())

  user1     User   @relation("User1Sessions", fields: [user_1_id], references: [id])
  user_1_id String

  user2     User   @relation("User2Sessions", fields: [user_2_id], references: [id])
  user_2_id String

  messages ChatMessage[]
}

model ChatMessage {
  id      String      @id @default(cuid())
  chat    ChatSession @relation(fields: [chat_id], references: [id])
  chat_id String

  encrypted_message String
  created_at        DateTime @default(now())

  sender    User   @relation(fields: [sender_id], references: [id])
  sender_id String
}

model DoctorProfile {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique

  specialization     String
  license_verified   Boolean @default(false)
  availability_slots Json
  consultation_fee   Float
  rating             Float?
  bio                String?

  appointments Appointment[]
}

model Appointment {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  doctor    DoctorProfile @relation(fields: [doctor_id], references: [id])
  doctor_id String

  slot_datetime DateTime
  status        String
  payment_id    String
  created_at    DateTime @default(now())
}

model Journal {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  entry_date DateTime
  mood       String
  content    String
  tags       String[]
  created_at DateTime @default(now())
}

model Notification {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  type         String
  reference_id String
  is_read      Boolean  @default(false)
  created_at   DateTime @default(now())
}

model AdminAction {
  id       String @id @default(cuid())
  admin    User   @relation("AdminActions", fields: [admin_id], references: [id])
  admin_id String

  action    String
  target_id String
  timestamp DateTime @default(now())
  notes     String?
}

model Illness {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String // e.g., "autoimmune", "mental_health", "chronic_pain"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  userIllnesses UserIllnessPreference[]
  posts         Post[] // For categorizing posts
}

model UserPreferences {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique

  // Matching preferences
  ageRangeMin     Int    @default(12)
  ageRangeMax     Int    @default(65)
  preferredGender Gender @default(ANY)

  // Chat & Community preferences
  isOpenToGroupChats Boolean @default(true)
  isOpenToMentoring  Boolean @default(false)
  isSeekingMentor    Boolean @default(false)

  // Communication preferences
  preferredChatStyle String[] // ["supportive", "practical", "casual", "deep"]
  availabilityHours  String[] // ["morning", "afternoon", "evening", "night"]

  // Privacy & Safety
  shareAge       Boolean @default(true)
  shareIllnesses Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  illnesses UserIllnessPreference[]
}

model UserIllnessPreference {
  id               String          @id @default(cuid())
  userPreference   UserPreferences @relation(fields: [userPreferenceId], references: [id], onDelete: Cascade)
  userPreferenceId String

  illness   Illness @relation(fields: [illnessId], references: [id])
  illnessId String

  // Specific preferences for this illness
  isMainIllness     Boolean @default(false) // Primary condition
  diagnosedYear     Int?
  severityLevel     Int?    @default(3) // 1-5 scale
  isSeekingSupport  Boolean @default(true)
  isOfferingSupport Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([userPreferenceId, illnessId])
}

model OTPVerification {
  id      String @id @default(cuid())
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  otp_code   String   @db.VarChar(6)
  otp_type   OTPType
  expires_at DateTime
  is_used    Boolean  @default(false)
  attempts   Int      @default(0)
  created_at DateTime @default(now())

  @@index([user_id, otp_type])
  @@index([expires_at])
}

enum Role {
  USER
  DOCTOR
  MENTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  ANY // For preferences only
}

enum OTPType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  PHONE_VERIFICATION
}
